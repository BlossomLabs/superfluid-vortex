{"version":3,"file":"DataView.js","sources":["../src/components/DataView/DataView.js"],"sourcesContent":["import React, { useEffect, useCallback, useMemo, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { noop, warnOnce } from '../../utils'\nimport { textStyle, GU } from '../../style'\nimport { useTheme } from '../../theme'\nimport Box from '../../components/Box/Box'\nimport Pagination from '../../components/Pagination/Pagination'\nimport { useLayout } from '../../components/Layout/Layout'\nimport { TableView } from './TableView'\nimport { ListView } from './ListView'\nimport EmptyState from './EmptyState'\n\nfunction prepareEntries(entries, from, to, selectedIndexes) {\n  return entries.slice(from, to).map((entry, index) => {\n    const entryIndex = from + index\n    const selected = selectedIndexes.includes(entryIndex)\n    return { value: entry || null, index: entryIndex, selected }\n  })\n}\n\nfunction prepareFields(fields) {\n  return fields.map((fieldFromProps, index, fields) => {\n    // Convert non-object fields (e.g. a simple string) into objects\n    const field =\n      fieldFromProps && fieldFromProps.label\n        ? fieldFromProps\n        : { label: fieldFromProps }\n\n    // Auto align the last column to the end (right)\n    if (!field.align) {\n      field.align =\n        index === fields.length - 1 && fields.length > 1 ? 'end' : 'start'\n    }\n\n    return field\n  })\n}\n\nfunction entryExpansion(content) {\n  // Rows\n  if (Array.isArray(content) && content.length > 0) {\n    return {\n      content,\n      freeLayout: false,\n    }\n  }\n  // Free layout\n  if (content && !Array.isArray(content)) {\n    return {\n      content: [content],\n      freeLayout: true,\n    }\n  }\n  // No expansion\n  return {\n    content: [],\n    freeLayout: false,\n  }\n}\n\nfunction renderEntries(\n  entries,\n  { fields, renderEntry, renderEntryActions, renderEntryExpansion, mode }\n) {\n  return entries.map(entry => {\n    const { value, index, selected } = entry\n\n    let entryNodes = renderEntry(value, index, { selected, mode })\n\n    if (!Array.isArray(entryNodes)) {\n      entryNodes = []\n    }\n\n    // Create undefined cells too\n    while (entryNodes.length < fields.length) {\n      entryNodes.push(null)\n    }\n\n    const expansion = entryExpansion(\n      renderEntryExpansion\n        ? renderEntryExpansion(value, index, { selected, mode })\n        : null\n    )\n\n    const actions = renderEntryActions\n      ? renderEntryActions(value, index, { selected, mode })\n      : null\n\n    return {\n      actions,\n      entryNodes,\n      expansion,\n      index,\n      selected,\n    }\n  })\n}\n\nfunction useSelection(entries, selection, onSelectEntries) {\n  // Only used if `selection` is not passed via props. The selection supports\n  // both a managed and a controlled mode, to provide a better developer\n  // experience out of the box.\n  const [selectionManaged, setSelectionManaged] = useState([])\n\n  const currentSelection =\n    selection === undefined ? selectionManaged : selection\n\n  const updateSelection = useCallback(\n    newSelection => {\n      // Managed state\n      if (selection === undefined) {\n        setSelectionManaged(newSelection)\n      }\n\n      // Useful to notify, even in managed mode\n      onSelectEntries(\n        [...newSelection].sort().map(index => entries[index]),\n        newSelection\n      )\n    },\n    [selection, onSelectEntries, entries]\n  )\n\n  const allSelected = useMemo(() => {\n    // none selected\n    if (currentSelection.length === 0) {\n      return -1\n    }\n    // all selected\n    if (currentSelection.length === entries.length) {\n      return 1\n    }\n    // some selected\n    return 0\n  }, [entries, currentSelection])\n\n  const toggleEntrySelect = useCallback(\n    entryIndex => {\n      updateSelection(\n        currentSelection.includes(entryIndex)\n          ? currentSelection.filter(index => index !== entryIndex)\n          : [...currentSelection, entryIndex]\n      )\n    },\n    [updateSelection, currentSelection]\n  )\n\n  const selectAll = useCallback(() => {\n    updateSelection(\n      currentSelection.length === 0 ? entries.map((_, index) => index) : []\n    )\n  }, [entries, currentSelection, updateSelection])\n\n  return {\n    allSelected,\n    selectAll,\n    toggleEntrySelect,\n    selectedIndexes: currentSelection,\n  }\n}\n\nfunction deprecatedEmptyStatePropsCompat({\n  emptyState,\n  statusEmpty,\n  statusLoading,\n  statusEmptyFilters,\n  statusEmptySearch,\n}) {\n  for (const [propName, propValue, emptyStateName, partName] of [\n    ['statusEmpty', statusEmpty, 'default', 'title'],\n    ['statusEmptyFilters', statusEmptyFilters, 'empty-filters', 'subtitle'],\n    ['statusEmptySearch', statusEmptySearch, 'empty-search', 'subtitle'],\n    ['statusLoading', statusLoading, 'loading', 'title'],\n  ]) {\n    if (!propValue) {\n      continue\n    }\n\n    warnOnce(\n      `DataView:${propName}`,\n      `DataView: the ${propName} prop is now deprecated, please use emptyState instead.`\n    )\n\n    // Only set the default state title if not set already\n    if (!emptyState[emptyStateName] || !emptyState[emptyStateName][partName]) {\n      emptyState[emptyStateName] = {\n        ...emptyState[emptyStateName],\n        [partName]: propValue,\n      }\n    }\n  }\n\n  return emptyState\n}\n\nconst DataView = React.memo(function DataView({\n  emptyState,\n  entries,\n  entriesPerPage,\n  fields,\n  heading,\n  mode,\n  onPageChange,\n  onSelectEntries,\n  onStatusEmptyClear,\n  page,\n  renderEntry,\n  renderEntryActions,\n  renderEntryExpansion,\n  renderSelectionCount,\n  selection,\n  status,\n  tableRowHeight,\n\n  // deprecated\n  renderEntryChild,\n  statusEmpty,\n  statusEmptyFilters,\n  statusEmptySearch,\n  statusLoading,\n}) {\n  if (renderEntryChild && !renderEntryExpansion) {\n    warnOnce(\n      'DataView:renderEntryChild',\n      'DataView: the renderEntryChild prop has been renamed ' +\n        'renderEntryExpansion and will be removed in a future version. ' +\n        'Please use the new name.'\n    )\n    renderEntryExpansion = renderEntryChild\n  }\n\n  if (renderEntryExpansion && onSelectEntries) {\n    warnOnce(\n      'DataView: renderEntryExpansion + onSelectEntries',\n      'A DataView cannot be made selectable with some of its entries ' +\n        'expandable. Please use only one of renderEntryExpansion or ' +\n        'onSelectEntries at a time. Ignoring renderEntryExpansion.'\n    )\n    renderEntryExpansion = undefined\n  }\n\n  emptyState = deprecatedEmptyStatePropsCompat({\n    emptyState,\n    statusEmpty,\n    statusEmptyFilters,\n    statusEmptySearch,\n    statusLoading,\n  })\n\n  // Only used if `page` is not passed. The pagination supports both a\n  // managed and a controlled mode, to provide a better developer experience\n  // out of the box.\n  const [pageManaged, setPageManaged] = useState(0)\n\n  const handlePageChange = useCallback(\n    newPage => {\n      // Managed state\n      if (page === undefined) {\n        setPageManaged(newPage)\n      }\n\n      // Useful to notify, even in managed mode\n      onPageChange(newPage)\n    },\n    [onPageChange, page]\n  )\n\n  // Reset managed pagination if the entries or the pagination changes.\n  useEffect(() => {\n    setPageManaged(0)\n  }, [entries])\n\n  const selectedPage = page === undefined ? pageManaged : page\n\n  const theme = useTheme()\n  const { layoutName } = useLayout()\n\n  const listMode =\n    mode === 'list' || (mode !== 'table' && layoutName === 'small')\n\n  const {\n    allSelected,\n    selectAll,\n    toggleEntrySelect,\n    selectedIndexes,\n  } = useSelection(entries, selection, onSelectEntries)\n\n  const hasAnyActions = Boolean(renderEntryActions)\n  const hasAnyExpansion = Boolean(renderEntryExpansion)\n  const canSelect = Boolean(onSelectEntries)\n\n  // If entriesPerPage is -1 (or 0): no pagination\n  if (entriesPerPage < 1) {\n    entriesPerPage = entries.length\n  }\n\n  const pages = Math.ceil(entries.length / entriesPerPage)\n\n  const displayFrom = entriesPerPage * selectedPage\n  const displayTo = displayFrom + entriesPerPage\n  const displayedEntries = prepareEntries(\n    entries,\n    displayFrom,\n    displayTo,\n    selectedIndexes\n  )\n\n  const preparedFields = prepareFields(fields)\n  const renderedEntries = renderEntries(displayedEntries, {\n    fields,\n    renderEntry,\n    renderEntryActions,\n    renderEntryExpansion,\n    mode: listMode ? 'list' : 'table',\n  })\n\n  const alignChildOnField = fields.findIndex(field => field && field.childStart)\n\n  const emptyEntries = renderedEntries.length === 0\n\n  return (\n    <Box padding={0}>\n      {heading && (\n        <div\n          css={`\n            padding: ${2 * GU}px ${layoutName === 'small' ? 2 * GU : 3 * GU}px;\n          `}\n        >\n          {typeof heading === 'string' ? (\n            <h1\n              css={`\n                margin-bottom: ${2 * GU}px;\n                ${textStyle('body2')};\n              `}\n            >\n              {heading}\n            </h1>\n          ) : (\n            heading\n          )}\n        </div>\n      )}\n\n      {!emptyEntries &&\n        (listMode ? (\n          <ListView\n            allSelected={allSelected}\n            entries={renderedEntries}\n            fields={preparedFields}\n            hasAnyExpansion={hasAnyExpansion}\n            onSelect={toggleEntrySelect}\n            onSelectAll={selectAll}\n            renderSelectionCount={renderSelectionCount}\n            rowHeight={tableRowHeight}\n            selectable={canSelect}\n          />\n        ) : (\n          <TableView\n            alignChildOnField={Math.min(\n              Math.max(-1, alignChildOnField),\n              fields.length - 1\n            )}\n            allSelected={allSelected}\n            entries={renderedEntries}\n            fields={preparedFields}\n            hasAnyActions={hasAnyActions}\n            hasAnyExpansion={hasAnyExpansion}\n            onSelect={toggleEntrySelect}\n            onSelectAll={selectAll}\n            renderSelectionCount={renderSelectionCount}\n            rowHeight={tableRowHeight}\n            selectable={canSelect}\n            selectedCount={selectedIndexes.length}\n          />\n        ))}\n\n      {emptyEntries && (\n        <EmptyState\n          status={status}\n          configurator={emptyState}\n          onStatusEmptyClear={onStatusEmptyClear}\n        />\n      )}\n\n      {pages > 1 && (\n        <div\n          css={`\n            border-top: 1px solid ${theme.border};\n          `}\n        >\n          <Pagination\n            pages={pages}\n            selected={selectedPage}\n            onChange={handlePageChange}\n            touchMode={layoutName === 'small'}\n          />\n        </div>\n      )}\n    </Box>\n  )\n})\n\nDataView.propTypes = {\n  page: PropTypes.number,\n  entries: PropTypes.array.isRequired,\n  entriesPerPage: PropTypes.number,\n  fields: PropTypes.array.isRequired,\n  heading: PropTypes.node,\n  mode: PropTypes.oneOf(['adaptive', 'table', 'list']),\n  onPageChange: PropTypes.func,\n  onSelectEntries: PropTypes.func,\n  renderEntry: PropTypes.func.isRequired,\n  renderEntryActions: PropTypes.func,\n  renderEntryExpansion: PropTypes.func,\n  renderSelectionCount: PropTypes.func,\n  selection: PropTypes.array,\n  tableRowHeight: PropTypes.number,\n  status: PropTypes.oneOf([\n    'default',\n    'empty-filters',\n    'empty-search',\n    'loading',\n  ]),\n  onStatusEmptyClear: PropTypes.func,\n  emptyState: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n\n  // deprecated\n  renderEntryChild: PropTypes.func,\n  statusEmpty: PropTypes.node,\n  statusLoading: PropTypes.node,\n  statusEmptyFilters: PropTypes.node,\n  statusEmptySearch: PropTypes.node,\n}\n\nDataView.defaultProps = {\n  emptyState: {},\n  entriesPerPage: 10,\n  mode: 'adaptive',\n  onPageChange: noop,\n  renderSelectionCount: count => `${count} items selected`,\n  status: 'default',\n  tableRowHeight: 8 * GU,\n}\n\nexport default DataView\n"],"names":["prepareEntries","entries","from","to","selectedIndexes","slice","map","entry","index","entryIndex","selected","includes","value","prepareFields","fields","fieldFromProps","field","label","align","length","entryExpansion","content","Array","isArray","freeLayout","renderEntries","renderEntry","renderEntryActions","renderEntryExpansion","mode","entryNodes","push","expansion","actions","useSelection","selection","onSelectEntries","selectionManaged","setSelectionManaged","useState","currentSelection","undefined","updateSelection","useCallback","newSelection","sort","allSelected","useMemo","toggleEntrySelect","filter","selectAll","_","deprecatedEmptyStatePropsCompat","emptyState","statusEmpty","statusLoading","statusEmptyFilters","statusEmptySearch","propName","propValue","emptyStateName","partName","warnOnce","DataView","React","memo","entriesPerPage","heading","onPageChange","onStatusEmptyClear","page","renderSelectionCount","status","tableRowHeight","renderEntryChild","pageManaged","setPageManaged","handlePageChange","newPage","useEffect","selectedPage","theme","useTheme","layoutName","useLayout","listMode","hasAnyActions","Boolean","hasAnyExpansion","canSelect","pages","Math","ceil","displayFrom","displayTo","displayedEntries","preparedFields","renderedEntries","alignChildOnField","findIndex","childStart","emptyEntries","Box","GU","textStyle","ListView","TableView","min","max","EmptyState","border","Pagination","propTypes","PropTypes","number","array","isRequired","node","oneOf","func","oneOfType","object","defaultProps","noop","count"],"mappings":"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"}