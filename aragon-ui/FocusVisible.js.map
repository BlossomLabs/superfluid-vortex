{"version":3,"file":"FocusVisible.js","sources":["../src/components/FocusVisible/FocusVisible.js"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\n// Implements a behavior similar to :focus-visible for browsers that are not\n// supporting it yet.\n//\n// It follows the Chrome implementation, checking for a pointer device rather\n// than a keyboard event.\n//\n// Resources:\n//  - https://caniuse.com/#search=%3Afocus-visible\n//  - https://github.com/WICG/focus-visible/issues/88#issuecomment-363227219\n//  - https://chromium-review.googlesource.com/c/chromium/src/+/897002<Paste>\n//\nclass FocusVisible extends React.Component {\n  static propTypes = {\n    // children is called with an object containing two entries:\n    //   - focusVisible represents the visibility of the focus (boolean).\n    //   - onFocus() need to be called when the target element is focused.\n    children: PropTypes.func.isRequired,\n  }\n  _element = React.createRef()\n  _document = null\n  state = {\n    focusVisible: false,\n  }\n  componentDidMount() {\n    // `document` was previously set as a state entry, which was having the\n    // advantages of keeping track of it, and also triggering a rerender to\n    // remove the injected span.\n    //\n    // The issue with this approach is that the component can get unmounted\n    // before the state gets updated (e.g. in case of an error in the tree),\n    // preventing to remove the event listeners.\n    //\n    // this._document is now set on the instance directly, and\n    // this.forceUpdate() is used to trigger the second render needed to remove\n    // the injected span.\n    this._document = this._element.current.ownerDocument\n    this._document.addEventListener('mousedown', this.handlePointerEvent)\n    this._document.addEventListener('mouseup', this.handlePointerEvent)\n    this._document.addEventListener('touchstart', this.handlePointerEvent)\n    this._document.addEventListener('touchend', this.handlePointerEvent)\n    this.forceUpdate()\n  }\n  componentWillUnmount() {\n    if (this._document) {\n      this._document.removeEventListener('mousedown', this.handlePointerEvent)\n      this._document.removeEventListener('mouseup', this.handlePointerEvent)\n      this._document.removeEventListener('touchstart', this.handlePointerEvent)\n      this._document.removeEventListener('touchend', this.handlePointerEvent)\n    }\n  }\n  // It doesnâ€™t seem to be specified, but pointer-related events happen before\n  // the focus-related events on every modern browser.\n  handlePointerEvent = e => {\n    this._pointerActive = true\n    this._timer = setTimeout(() => {\n      this._pointerActive = false\n    }, 0)\n    if (this.state.focusVisible) {\n      this.setState({ focusVisible: false })\n    }\n  }\n  // This is passed to `children()`, and called from the outside.\n  handleFocus = () => {\n    this.setState({ focusVisible: !this._pointerActive })\n  }\n  render() {\n    const { focusVisible } = this.state\n    return (\n      <React.Fragment>\n        {this.props.children({ focusVisible, onFocus: this.handleFocus })}\n        {!this._document && <span ref={this._element} />}\n      </React.Fragment>\n    )\n  }\n}\n\nexport default FocusVisible\n"],"names":["FocusVisible","React","Component","createRef","_defineProperty","focusVisible","e","_pointerActive","_timer","setTimeout","state","setState","componentDidMount","_document","_element","current","ownerDocument","addEventListener","handlePointerEvent","forceUpdate","componentWillUnmount","removeEventListener","render","props","children","onFocus","handleFocus","PropTypes","func","isRequired"],"mappings":"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"}