{"version":3,"file":"web3.js","sources":["../../../../src/utils/web3.js"],"sourcesContent":["import sha3 from 'js-sha3'\nimport { warn } from './environment'\nimport {\n  ARBISCAN_NETWORK_TYPES,\n  ARBISCAN_TYPES,\n  BLOCKSCOUT_NETWORK_TYPES,\n  BLOCKSCOUT_TYPES,\n  ETHERSCAN_NETWORK_TYPES,\n  ETHERSCAN_TYPES,\n  POLYGONSCAN_NETWORK_TYPES,\n  POLYGONSCAN_TYPES,\n} from './provider-types'\n\nconst { keccak_256: keccak256 } = sha3\n\nconst EMPTY_ADDRESS = '0x0000000000000000000000000000000000000000'\nconst TRANSACTION_REGEX = /^0x[A-Fa-f0-9]{64}$/\nconst ADDRESS_REGEX = /^0x[0-9a-fA-F]{40}$/\n\nconst TRUST_WALLET_BASE_URL =\n  'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum'\n\nconst BLOCK_EXPLORERS = {\n  etherscan: ({ type, value, networkType }) => {\n    if (networkType === 'private') {\n      return ''\n    }\n\n    if (!ETHERSCAN_NETWORK_TYPES.has(networkType)) {\n      throw new Error('provider not supported.')\n    }\n    if (!ETHERSCAN_TYPES.has(type)) {\n      throw new Error('type not supported.')\n    }\n\n    const subdomain = ETHERSCAN_NETWORK_TYPES.get(networkType)\n    const typePart = ETHERSCAN_TYPES.get(type)\n    return `https://${subdomain}etherscan.io/${typePart}/${value}`\n  },\n  blockscout: ({ type, value, networkType }) => {\n    if (networkType === 'private') {\n      return ''\n    }\n\n    if (!BLOCKSCOUT_NETWORK_TYPES.has(networkType)) {\n      throw new Error('provider not supported.')\n    }\n\n    if (!BLOCKSCOUT_TYPES.has(type)) {\n      throw new Error('type not supported.')\n    }\n\n    const networkName = BLOCKSCOUT_NETWORK_TYPES.get(networkType)\n    const typePart = BLOCKSCOUT_TYPES.get(type)\n    return `https://blockscout.com/poa/${networkName}/${typePart}/${value}`\n  },\n  polygonscan: ({ type, value, networkType }) => {\n    if (networkType === 'private') {\n      return ''\n    }\n\n    if (!POLYGONSCAN_NETWORK_TYPES.has(networkType)) {\n      throw new Error('provider not supported.')\n    }\n    if (!POLYGONSCAN_TYPES.has(type)) {\n      throw new Error('type not supported.')\n    }\n\n    const subdomain = POLYGONSCAN_NETWORK_TYPES.get(networkType)\n    const typePart = POLYGONSCAN_TYPES.get(type)\n    return `https://${subdomain}polygonscan.com/${typePart}/${value}`\n  },\n  arbiscan: ({ type, value, networkType }) => {\n    if (networkType === 'private') {\n      return ''\n    }\n\n    if (!ARBISCAN_NETWORK_TYPES.has(networkType)) {\n      throw new Error('provider not supported.')\n    }\n    if (!ARBISCAN_TYPES.has(type)) {\n      throw new Error('type not supported.')\n    }\n\n    const subdomain = ARBISCAN_NETWORK_TYPES.get(networkType)\n    const typePart = ARBISCAN_TYPES.get(type)\n    return `https://${subdomain}arbiscan.com/${typePart}/${value}`\n  },\n}\n\n/**\n * Converts to a checksum address\n *\n * This function is taken from web3-utils:\n * https://github.com/ethereum/web3.js/blob/22df832303e349f8ae02f0392e56abe10e1dfaac/packages/web3-utils/src/index.js#L287-L315\n * And was adapted to use js-sha3 rather than soliditySha3.js from web3.js, in\n * order to avoid adding the BN.js and underscore dependencies.\n *\n * @method toChecksumAddress\n * @param {String} address the given HEX address\n * @returns {String}\n */\nfunction toChecksumAddress(address) {\n  if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n    throw new Error(\n      'Given address \"' + address + '\" is not a valid Ethereum address.'\n    )\n  }\n\n  address = address.toLowerCase().replace(/^0x/i, '')\n\n  const addressHash = keccak256(address).replace(/^0x/i, '')\n  let checksumAddress = '0x'\n\n  for (let i = 0; i < address.length; i++) {\n    // If ith character is 9 to f then make it uppercase\n    if (parseInt(addressHash[i], 16) > 7) {\n      checksumAddress += address[i].toUpperCase()\n    } else {\n      checksumAddress += address[i]\n    }\n  }\n\n  return checksumAddress\n}\n\n/**\n * Check address equality without checksums\n * @param {string} first First address\n * @param {string} second Second address\n * @returns {boolean} Address equality\n */\nexport function addressesEqual(first, second) {\n  first = first && first.toLowerCase()\n  second = second && second.toLowerCase()\n  return first === second\n}\n\n/**\n * Shorten an Ethereum address. `charsLength` allows to change the number of\n * characters on both sides of the ellipsis.\n *\n * Examples:\n *   shortenAddress('0x19731977931271')    // 0x1973…1271\n *   shortenAddress('0x19731977931271', 2) // 0x19…71\n *   shortenAddress('0x197319')            // 0x197319 (already short enough)\n *\n * @param {string} address The address to shorten\n * @param {number} [charsLength=4] The number of characters to change on both sides of the ellipsis\n * @returns {string} The shortened address\n */\nexport function shortenAddress(address, charsLength = 4) {\n  const prefixLength = 2 // \"0x\"\n  if (!address) {\n    return ''\n  }\n  if (address.length < charsLength * 2 + prefixLength) {\n    return address\n  }\n  return (\n    address.slice(0, charsLength + prefixLength) +\n    '…' +\n    address.slice(-charsLength)\n  )\n}\n\n/**\n * Alias for shortenAddress (to generalize its use)\n */\nexport const shortenTransaction = shortenAddress\n\n/**\n *\n * Checks if the given string is an address\n *\n * @method isAddress\n * @param {string} address the given HEX address\n * @returns {boolean}\n */\nexport function isAddress(address) {\n  return ADDRESS_REGEX.test(address)\n}\n\n/**\n *\n * Checks if the given string is a transaction\n *\n * @method isTransaction\n * @param {string} address the given HEX address\n * @returns {boolean}\n */\nexport function isTransaction(transaction) {\n  return TRANSACTION_REGEX.test(transaction)\n}\n\n/**\n * Generates an etherscan URL\n *\n * @param {string} type The type of URL (block, transaction, address or token).\n * @param {string} value Identifier of the object, depending on the type (block number, transaction hash, …).\n * @param {object} options The optional parameters.\n * @param {string} options.networkType The Ethereum network type (main, kovan, rinkeby, ropsten, goerli, or private).\n * @param {string} options.provider The explorer provider (e.g. etherscan).\n * @returns {string} The generated URL, or an empty string if the parameters are invalid.\n */\nexport function blockExplorerUrl(\n  type,\n  value,\n  { networkType = 'xdai', provider = 'blockscout' } = {}\n) {\n  const explorer = BLOCK_EXPLORERS[provider]\n\n  if (!explorer) {\n    warn('blockExplorerUrl(): provider not supported.')\n    return ''\n  }\n\n  try {\n    return explorer({ type, value, networkType })\n  } catch (err) {\n    warn(`blockExplorerUrl(): ${err.message}`)\n    return ''\n  }\n}\n\n/**\n * Get the address of a token icon\n *\n * @param {string} address The contract address of the token, or the zero address (0x000…) to get the Ethereum icon.\n * @returns {string} The generated URL, or an empty string if the parameters are invalid.\n */\nexport function tokenIconUrl(address = '') {\n  try {\n    address = toChecksumAddress(address.trim())\n  } catch (err) {\n    return ''\n  }\n\n  if (address === EMPTY_ADDRESS) {\n    return `${TRUST_WALLET_BASE_URL}/info/logo.png`\n  }\n\n  return `${TRUST_WALLET_BASE_URL}/assets/${address}/logo.png`\n}\n"],"names":["keccak_256","keccak256","sha3","EMPTY_ADDRESS","TRANSACTION_REGEX","ADDRESS_REGEX","TRUST_WALLET_BASE_URL","BLOCK_EXPLORERS","etherscan","type","value","networkType","ETHERSCAN_NETWORK_TYPES","has","Error","ETHERSCAN_TYPES","subdomain","get","typePart","blockscout","BLOCKSCOUT_NETWORK_TYPES","BLOCKSCOUT_TYPES","networkName","polygonscan","POLYGONSCAN_NETWORK_TYPES","POLYGONSCAN_TYPES","arbiscan","ARBISCAN_NETWORK_TYPES","ARBISCAN_TYPES","toChecksumAddress","address","test","toLowerCase","replace","addressHash","checksumAddress","i","length","parseInt","toUpperCase","addressesEqual","first","second","shortenAddress","charsLength","prefixLength","slice","shortenTransaction","isAddress","isTransaction","transaction","blockExplorerUrl","provider","explorer","warn","err","message","tokenIconUrl","trim"],"mappings":"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"}