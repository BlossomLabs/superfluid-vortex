{"version":3,"file":"TokenBadge.js","sources":["../../../../../src/components/TokenBadge/TokenBadge.js"],"sourcesContent":["import React, { useCallback, useRef, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport { ImageExists } from '../../hooks'\nimport { GU } from '../../style'\nimport { isAddress, tokenIconUrl, warn } from '../../utils'\nimport BadgeBase from '../BadgeBase/BadgeBase'\nimport TokenBadgePopover from './TokenBadgePopover'\n\nconst TokenBadge = React.memo(function TokenBadge({\n  address,\n  badgeOnly,\n  className,\n  compact,\n  explorerProvider,\n  name,\n  networkType,\n  style,\n  symbol,\n}) {\n  const badgeRef = useRef(null)\n\n  const [opened, setOpened] = useState(false)\n  const handleClose = useCallback(() => setOpened(false), [])\n  const handleOpen = useCallback(() => setOpened(true), [])\n\n  const isValidAddress = isAddress(address)\n  const iconSrc =\n    isValidAddress && networkType === 'main' ? tokenIconUrl(address) : null\n  const title = name && symbol ? `${name} (${symbol})` : symbol\n\n  if (!isValidAddress) {\n    warn(`TokenBadge: provided invalid address (${address})`)\n  }\n\n  return (\n    <BadgeBase\n      badgeRef={badgeRef}\n      className={className}\n      compact={compact}\n      disabled={badgeOnly}\n      icon={\n        <ImageExists src={iconSrc}>\n          {({ exists }) => exists && <Icon compact={compact} src={iconSrc} />}\n        </ImageExists>\n      }\n      label={\n        <span\n          css={`\n            position: relative;\n            top: 1px;\n            display: flex;\n            flex-shrink: 1;\n            min-width: 0;\n            margin-left: ${compact ? 0 : `${1 * GU}px`};\n          `}\n        >\n          {name && <Name>{name}</Name>}\n          <Symbol>{name ? `(${symbol})` : symbol}</Symbol>\n        </span>\n      }\n      onClick={isValidAddress ? handleOpen : undefined}\n      style={style}\n      title={`${title} âˆ’ ${address || 'No address'}`}\n    >\n      {popoverDisabled =>\n        !popoverDisabled &&\n        address && (\n          <TokenBadgePopover\n            address={address}\n            explorerProvider={explorerProvider}\n            iconSrc={iconSrc}\n            networkType={networkType}\n            onClose={handleClose}\n            opener={badgeRef.current}\n            title={title}\n            visible={opened}\n          />\n        )\n      }\n    </BadgeBase>\n  )\n})\nTokenBadge.propTypes = {\n  address: PropTypes.string,\n  badgeOnly: PropTypes.bool,\n  className: PropTypes.string,\n  compact: PropTypes.bool,\n  explorerProvider: PropTypes.string,\n  name: PropTypes.string,\n  networkType: PropTypes.string,\n  style: PropTypes.object,\n  symbol: PropTypes.string.isRequired,\n}\nTokenBadge.defaultProps = {\n  address: '',\n  name: '',\n  networkType: 'main',\n}\n\nfunction Icon({ compact, src, ...props }) {\n  const margin = 1 * GU\n  return (\n    <span\n      css={`\n        flex-shrink: 0;\n        display: block;\n        width: 18px;\n        height: 18px;\n        margin: 0 ${compact ? margin : 0}px 0 ${compact ? 0 : margin}px;\n        background-size: contain;\n        background-position: 50% 50%;\n        background-repeat: no-repeat;\n        background-image: url(${src});\n      `}\n      {...props}\n    />\n  )\n}\nIcon.propTypes = {\n  compact: PropTypes.bool,\n  src: PropTypes.string.isRequired,\n}\n\nconst Name = styled.span`\n  flex-shrink: 1;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  min-width: 20%;\n  margin-right: ${0.5 * GU}px;\n`\n\nconst Symbol = styled.span`\n  flex-shrink: 0;\n`\n\nexport default TokenBadge\n"],"names":["TokenBadge","React","memo","address","badgeOnly","className","compact","explorerProvider","name","networkType","style","symbol","badgeRef","useRef","opened","setOpened","useState","handleClose","useCallback","handleOpen","isValidAddress","isAddress","iconSrc","tokenIconUrl","title","warn","exists","GU","undefined","popoverDisabled","current","propTypes","PropTypes","string","bool","object","isRequired","defaultProps","Icon","src","props","margin","Name","styled","span","Symbol"],"mappings":"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"}