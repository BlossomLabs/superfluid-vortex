{"version":3,"file":"TableView.js","sources":["../../../../../src/components/DataView/TableView.js"],"sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Transition, animated } from '@react-spring/web'\nimport { GU, springs, textStyle } from '../../style'\nimport { useTheme } from '../../theme'\nimport { useLayout } from '../Layout/Layout'\nimport Checkbox from '../Input/Checkbox'\nimport { ToggleButton } from './ToggleButton'\nimport { OpenedSurfaceBorder } from './OpenedSurfaceBorder'\n\n// Table heading cells\nfunction headingsFromFields(\n  fields,\n  { hasAnyActions, hasAnyExpansion, selectContent, selectable }\n) {\n  const cells = fields.map((field, index) => [\n    field.label,\n    field.align === 'end' ? 'right' : 'left',\n  ])\n\n  if (hasAnyExpansion || selectable) {\n    cells.unshift([selectable ? selectContent : null, 'left'])\n  }\n\n  if (hasAnyActions) {\n    cells.push([null, 'left'])\n  }\n\n  // Return null if all the fields are empty\n  if (cells.every(cell => !cell[0])) {\n    return null\n  }\n\n  return cells\n}\n\nfunction cellsFromEntry(\n  entry,\n  {\n    fields,\n    hasAnyActions,\n    hasAnyExpansion,\n    hasExpansion,\n    selectContent,\n    selectable,\n    toggleChildContent,\n  }\n) {\n  const cells = entry.entryNodes.map((content, index) => [\n    content,\n    fields[index].align,\n    false,\n  ])\n\n  // Checkbox\n  if (selectable) {\n    cells.unshift([selectContent, 'start', true])\n  }\n\n  // Toggle child\n  if (!selectable && hasAnyExpansion) {\n    cells.unshift([hasExpansion && toggleChildContent, 'start', true])\n  }\n\n  // Actions\n  if (hasAnyActions) {\n    cells.push([entry.actions, 'end', true])\n  }\n\n  return cells\n}\n\nfunction TableView({\n  alignChildOnField,\n  allSelected,\n  entries,\n  fields,\n  hasAnyActions,\n  hasAnyExpansion,\n  onSelect,\n  onSelectAll,\n  renderSelectionCount,\n  rowHeight,\n  selectable,\n  selectedCount,\n}) {\n  const [opened, setOpened] = useState(-1)\n\n  const toggleEntry = useCallback(index => {\n    setOpened(opened => (opened === index ? -1 : index))\n  }, [])\n\n  const headCells = useMemo(\n    () =>\n      headingsFromFields(fields, {\n        hasAnyActions,\n        hasAnyExpansion,\n        selectContent: (\n          <Checkbox\n            indeterminate={allSelected === 0}\n            checked={allSelected > -1}\n            onChange={onSelectAll}\n          />\n        ),\n        selectable,\n      }),\n    [\n      fields,\n      hasAnyActions,\n      hasAnyExpansion,\n      allSelected,\n      onSelectAll,\n      selectable,\n    ]\n  )\n\n  useEffect(() => {\n    setOpened(-1)\n  }, [entries, fields])\n\n  return (\n    <table\n      css={`\n        width: 100%;\n        border-spacing: 0;\n        border-collapse: separate;\n      `}\n    >\n      {headCells && (\n        <thead>\n          <HeadRow\n            cells={headCells}\n            selectedCount={selectedCount}\n            renderSelectionCount={renderSelectionCount}\n          />\n        </thead>\n      )}\n      <tbody>\n        {entries.map((entry, index) => (\n          <Entry\n            key={entry.index}\n            alignChildOnField={alignChildOnField}\n            entry={entry}\n            fields={fields}\n            firstRow={index === 0}\n            hasAnyActions={hasAnyActions}\n            hasAnyExpansion={hasAnyExpansion}\n            onSelect={onSelect}\n            onToggle={toggleEntry}\n            opened={opened === entry.index}\n            rowHeight={rowHeight}\n            selectable={selectable}\n          />\n        ))}\n      </tbody>\n    </table>\n  )\n}\n\nTableView.propTypes = {\n  alignChildOnField: PropTypes.number.isRequired,\n  allSelected: PropTypes.oneOf([-1, 0, 1]).isRequired,\n  entries: PropTypes.array.isRequired,\n  fields: PropTypes.array.isRequired,\n  hasAnyActions: PropTypes.bool.isRequired,\n  hasAnyExpansion: PropTypes.bool.isRequired,\n  onSelect: PropTypes.func.isRequired,\n  onSelectAll: PropTypes.func.isRequired,\n  renderSelectionCount: PropTypes.func.isRequired,\n  rowHeight: PropTypes.number.isRequired,\n  selectable: PropTypes.bool.isRequired,\n  selectedCount: PropTypes.number.isRequired,\n}\n\n// Disable prop types check for internal components\n/* eslint-disable react/prop-types */\n\nfunction useSidePadding() {\n  const { layoutName } = useLayout()\n  return layoutName === 'small' ? 2 * GU : 3 * GU\n}\n\nfunction HeadRow({ cells, selectedCount, renderSelectionCount }) {\n  const theme = useTheme()\n  const sidePadding = useSidePadding()\n  return (\n    <tr>\n      {cells.map((cell, index) => {\n        const hidden = selectedCount > 0 && index > 1\n        const content =\n          selectedCount > 0 && index === 1\n            ? renderSelectionCount(selectedCount)\n            : cell[0]\n        return (\n          !hidden && (\n            <th\n              key={index}\n              css={`\n                height: ${4 * GU}px;\n                padding: 0;\n                padding-left: ${index === 0 ? sidePadding : 0}px;\n                padding-right: ${index === cells.length - 1\n                  ? sidePadding\n                  : 0}px;\n                text-align: ${cell[1]};\n                ${textStyle('label2')};\n                color: ${theme.surfaceContentSecondary};\n                border-bottom: 1px solid ${theme.border};\n              `}\n              colSpan={selectedCount > 0 && index === 1 ? cells.length - 1 : 1}\n            >\n              {content}\n            </th>\n          )\n        )\n      })}\n    </tr>\n  )\n}\n\nconst Entry = React.memo(function Entry({\n  alignChildOnField,\n  entry,\n  fields,\n  firstRow,\n  hasAnyActions,\n  hasAnyExpansion,\n  onSelect,\n  onToggle,\n  opened,\n  rowHeight,\n  selectable,\n}) {\n  const hasExpansion = entry.expansion.content.length > 0\n  const entryIndex = entry.index\n\n  const handleToggle = useCallback(() => {\n    onToggle(entryIndex)\n  }, [entryIndex, onToggle])\n\n  const handleSelectChange = useCallback(\n    check => {\n      onSelect(entryIndex, check)\n    },\n    [entryIndex, onSelect]\n  )\n\n  const cells = cellsFromEntry(entry, {\n    fields,\n    hasAnyActions,\n    hasAnyExpansion,\n    hasExpansion,\n    selectable,\n    toggleChildContent: hasAnyExpansion ? (\n      <Toggle opened={opened} onToggle={handleToggle} />\n    ) : null,\n    selectContent: selectable ? (\n      <Checkbox onChange={handleSelectChange} checked={entry.selected} />\n    ) : null,\n  })\n\n  return (\n    <React.Fragment>\n      <EntryRow\n        cells={cells}\n        firstRow={firstRow}\n        rowHeight={rowHeight}\n        selected={entry.selected}\n      />\n      {hasExpansion && (\n        <EntryExpansion\n          alignChildOnCell={alignChildOnField + 1}\n          cellsCount={cells.length}\n          expansion={entry.expansion}\n          opened={opened}\n          rowHeight={rowHeight}\n        />\n      )}\n    </React.Fragment>\n  )\n})\n\nfunction EntryRow({ firstRow, cells, selected, rowHeight, mode }) {\n  const theme = useTheme()\n  const sidePadding = useSidePadding()\n\n  return (\n    <tr\n      css={`\n        transition: background 150ms ease-in-out;\n        background: ${selected ? theme.surfaceSelected : 'none'};\n      `}\n    >\n      {cells.map(([content, align, compact], index, cells) => {\n        const first = index === 0\n        const last = index === cells.length - 1\n        return (\n          <td\n            key={index}\n            css={`\n              position: relative;\n              width: ${compact\n                ? '1px' // For some reason Blink tends to make 0 grow but not 1px\n                : 'auto'};\n              height: ${rowHeight}px;\n              padding-top: 0;\n              padding-bottom: 0;\n              padding-left: ${first || compact ? sidePadding : 0}px;\n              padding-right: ${(!first && (align !== 'end' || last)) || compact\n                ? sidePadding\n                : 0}px;\n              border-top: ${firstRow ? '0' : `1px solid ${theme.border}`};\n            `}\n          >\n            <div\n              css={`\n                display: flex;\n                width: 100%;\n                justify-content: ${`flex-${align}`};\n              `}\n            >\n              {content}\n            </div>\n          </td>\n        )\n      })}\n    </tr>\n  )\n}\n\nfunction EntryExpansion({\n  alignChildOnCell,\n  cellsCount,\n  expansion,\n  opened,\n  rowHeight,\n}) {\n  const theme = useTheme()\n\n  // Handles the height of the expansion in free layout mode\n  const [freeLayoutContentHeight, setFreeLayoutContentHeight] = useState(0)\n\n  const handleFreeLayoutContentRef = useCallback(element => {\n    if (element) {\n      setFreeLayoutContentHeight(element.getBoundingClientRect().height)\n    }\n  }, [])\n\n  const height = expansion.freeLayout\n    ? freeLayoutContentHeight\n    : rowHeight * expansion.content.length\n\n  return (\n    <Transition\n      native\n      unique\n      items={opened}\n      from={{ height: 0 }}\n      enter={{ height }}\n      update={{ height }}\n      leave={{ height: 0 }}\n      config={{ ...springs.smooth, precision: 0.1 }}\n    >\n      {({ height }, show) =>\n        show && (\n          <tr\n            css={`\n              td {\n                position: relative;\n                padding: 0;\n                box-shadow: inset 0 6px 4px -4px rgba(0, 0, 0, 0.16);\n                background: ${theme.surfaceUnder};\n              }\n            `}\n          >\n            {alignChildOnCell > 0 && (\n              <td colSpan={alignChildOnCell}>\n                <OpenedSurfaceBorder opened={opened} />\n                <animated.div css=\"overflow: hidden\" style={{ height }}>\n                  {expansion.content.map((child, i) => (\n                    <div\n                      key={i}\n                      css={`\n                        height: ${expansion.freeLayout\n                          ? 'auto'\n                          : `${rowHeight}px`};\n                        border-top: 1px solid ${theme.border};\n                      `}\n                    />\n                  ))}\n                </animated.div>\n              </td>\n            )}\n            <td\n              colSpan={\n                alignChildOnCell === -1\n                  ? cellsCount\n                  : cellsCount - alignChildOnCell\n              }\n            >\n              {alignChildOnCell === 0 && (\n                <OpenedSurfaceBorder opened={opened} />\n              )}\n              <animated.div css=\"overflow: hidden\" style={{ height }}>\n                {expansion.content.map((child, i) => (\n                  <div\n                    key={i}\n                    ref={\n                      expansion.freeLayout ? handleFreeLayoutContentRef : null\n                    }\n                    css={`\n                      display: flex;\n                      align-items: center;\n                      height: ${expansion.freeLayout\n                        ? 'auto'\n                        : `${rowHeight}px`};\n                      padding-left: ${alignChildOnCell < 1 ? 3 * GU : 0}px;\n                      padding-right: ${3 * GU}px;\n                      border-top: 1px solid ${theme.border};\n                    `}\n                  >\n                    {child}\n                  </div>\n                ))}\n              </animated.div>\n            </td>\n          </tr>\n        )\n      }\n    </Transition>\n  )\n}\n\nconst Toggle = React.memo(function Toggle({ opened, onToggle }) {\n  return (\n    <div\n      css={`\n        width: 100%;\n        height: 100%;\n      `}\n    >\n      <OpenedSurfaceBorder opened={opened} />\n      <ToggleButton opened={opened} onClick={onToggle} />\n    </div>\n  )\n})\n\n/* eslint-enable react/prop-types */\n\nexport { TableView }\n"],"names":["headingsFromFields","fields","hasAnyActions","hasAnyExpansion","selectContent","selectable","cells","map","field","index","label","align","unshift","push","every","cell","cellsFromEntry","entry","hasExpansion","toggleChildContent","entryNodes","content","actions","TableView","alignChildOnField","allSelected","entries","onSelect","onSelectAll","renderSelectionCount","rowHeight","selectedCount","opened","setOpened","useState","toggleEntry","useCallback","headCells","useMemo","React","Checkbox","useEffect","propTypes","PropTypes","number","isRequired","oneOf","array","bool","func","useSidePadding","layoutName","useLayout","GU","HeadRow","theme","useTheme","sidePadding","hidden","length","textStyle","surfaceContentSecondary","border","Entry","memo","firstRow","onToggle","expansion","entryIndex","handleToggle","handleSelectChange","check","selected","EntryRow","mode","surfaceSelected","compact","first","last","EntryExpansion","alignChildOnCell","cellsCount","freeLayoutContentHeight","setFreeLayoutContentHeight","handleFreeLayoutContentRef","element","getBoundingClientRect","height","freeLayout","springs","smooth","precision","show","surfaceUnder","child","i","Toggle"],"mappings":"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"}