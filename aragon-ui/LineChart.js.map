{"version":3,"file":"LineChart.js","sources":["../src/components/LineChart/LineChart.js"],"sourcesContent":["import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { useSpring, animated } from '@react-spring/web'\nimport PropTypes from '../../proptypes'\nimport { springs } from '../../style'\nimport { unselectable } from '../../utils'\n\nconst LABELS_HEIGHT = 30\nconst WIDTH_DEFAULT = 300\n\nfunction useMeasuredWidth() {\n  const ref = useRef()\n  const [measuredWidth, setMeasuredWidth] = useState(WIDTH_DEFAULT)\n\n  const onResize = useCallback(() => {\n    if (ref.current) {\n      setMeasuredWidth(ref.current.clientWidth)\n    }\n  }, [])\n\n  const onRef = useCallback(\n    element => {\n      ref.current = element\n      onResize()\n    },\n    [onResize]\n  )\n\n  useEffect(() => {\n    window.addEventListener('resize', onResize)\n    return () => window.removeEventListener('resize', onResize)\n  }, [onResize])\n\n  return [measuredWidth, onRef]\n}\n\nfunction LineChart({\n  animDelay,\n  borderColor,\n  color,\n  dotRadius,\n  height,\n  label,\n  labelColor,\n  lines: linesProps,\n  reset,\n  springConfig,\n  total,\n  width: widthProps,\n  ...props\n}) {\n  const [progressVal, updateProgressVal] = useState(0)\n  const [width, onSvgRef] = useMeasuredWidth()\n\n  const lines = useMemo(() => {\n    return linesProps.map(lineOrValues =>\n      Array.isArray(lineOrValues) ? { values: lineOrValues } : lineOrValues\n    )\n  }, [linesProps])\n\n  // the count of provided values\n  const valuesCount = useMemo(() => {\n    // All the values have the same length, so we can use the first one.\n    return lines[0] ? lines[0].values.length : 0\n  }, [lines])\n\n  // the total amount of values\n  const totalCount = useMemo(() => {\n    // If no total is provided, the total is the number of provided values.\n    return total > 0 && total > valuesCount ? total : valuesCount\n  }, [valuesCount, total])\n\n  const getX = useCallback(\n    index => {\n      return (width / Math.max(1, totalCount - 1)) * index\n    },\n    [width, totalCount]\n  )\n\n  const getY = useCallback(\n    (percentage, progress, height) => {\n      const padding = dotRadius + 2\n      return height - padding - (height - padding * 2) * percentage * progress\n    },\n    [dotRadius]\n  )\n\n  const getLabelPosition = useCallback((index, length) => {\n    if (index === 0) return 'start'\n    if (index === length - 1) return 'end'\n    return 'middle'\n  }, [])\n\n  const labels =\n    label && totalCount > 0 ? [...Array(totalCount).keys()].map(label) : null\n\n  const chartHeight = height - (labels ? LABELS_HEIGHT : 0)\n\n  const rectangle = (\n    <rect\n      width={width}\n      height={chartHeight}\n      rx=\"3\"\n      ry=\"3\"\n      fill=\"#ffffff\"\n      strokeWidth=\"1\"\n      stroke={borderColor}\n    />\n  )\n\n  useSpring({\n    to: { progress: 1 },\n    from: { progress: 0 },\n    reset: false,\n    onChange: e => {\n      updateProgressVal(e.value.progress)\n    },\n  })\n\n  return (\n    <svg\n      ref={onSvgRef}\n      viewBox={`0 0 ${width} ${height}`}\n      width={widthProps || 'auto'}\n      height=\"auto\"\n      css=\"display: block\"\n      {...props}\n    >\n      <mask id=\"chart-mask\">{rectangle}</mask>\n      {rectangle}\n\n      <g mask=\"url(#chart-mask)\">\n        {totalCount > 0 && (\n          <path\n            strokeWidth=\"1\"\n            stroke={borderColor}\n            d={`${[...new Array(totalCount - 1)].reduce(\n              (path, _, index) =>\n                `${path} M ${getX(index)},${chartHeight} l 0,-8`,\n              ''\n            )}`}\n          />\n        )}\n\n        {lines.map((line, lineIndex) => (\n          <g key={`line-plot-${line.id || lineIndex}`}>\n            <animated.path\n              strokeWidth=\"2\"\n              fill=\"transparent\"\n              stroke={line.color || color(lineIndex, { lines })}\n              d={`\n                    M\n                    ${getX(0)},\n                    ${getY(line.values[0], progressVal, chartHeight)}\n\n                    ${line.values\n                      .slice(1)\n                      .map(\n                        (val, index) =>\n                          `L\n                           ${getX((index + 1) * progressVal)},\n                           ${getY(val, progressVal, chartHeight)}\n                          `\n                      )\n                      .join('')}\n                  `}\n            />\n\n            {line.values.slice(1, -1).map((val, index) => (\n              <animated.circle\n                key={index}\n                fill=\"white\"\n                r={dotRadius}\n                strokeWidth=\"1\"\n                cx={getX(index + 1) * progressVal}\n                cy={getY(val, progressVal, chartHeight)}\n                stroke={line.color || color(lineIndex, { lines })}\n              />\n            ))}\n          </g>\n        ))}\n\n        <animated.line\n          x1={getX(valuesCount - 1) * progressVal}\n          y1=\"0\"\n          x2={getX(valuesCount - 1) * progressVal}\n          y2={chartHeight}\n          stroke=\"#DAEAEF\"\n          strokeWidth=\"3\"\n        />\n      </g>\n\n      {labels && (\n        <g transform={`translate(0,${chartHeight})`}>\n          {labels.map((label, index) => (\n            <text\n              key={index}\n              x={getX(index)}\n              y={LABELS_HEIGHT / 2}\n              textAnchor={getLabelPosition(index, labels.length)}\n              fill={labelColor}\n              css={`\n                alignment-baseline: middle;\n                font-size: 12px;\n                font-weight: 300;\n                ${unselectable};\n              `}\n            >\n              {label}\n            </text>\n          ))}\n        </g>\n      )}\n    </svg>\n  )\n}\n\nLineChart.propTypes = {\n  springConfig: PropTypes._spring,\n  total: PropTypes.number,\n  width: PropTypes.number,\n  height: PropTypes.number,\n  dotRadius: PropTypes.number,\n  animDelay: PropTypes.number,\n  borderColor: PropTypes.string,\n  labelColor: PropTypes.string,\n  reset: PropTypes.bool,\n  lines: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.shape({\n        id: PropTypes.number,\n        values: PropTypes.arrayOf(PropTypes.number).isRequired, // numbers between 0 and 1\n        color: PropTypes.string, // overrides the color() prop if set\n      }),\n      // values can also be passed directly\n      PropTypes.arrayOf(PropTypes.number),\n    ])\n  ),\n  label: PropTypes.oneOfType([PropTypes.func, PropTypes._null]),\n  color: PropTypes.func,\n}\n\nLineChart.defaultProps = {\n  springConfig: springs.lazy,\n  total: -1,\n  height: 200,\n  dotRadius: 7 / 2,\n  animDelay: 500,\n  reset: false,\n  borderColor: 'rgba(209, 209, 209, 0.5)',\n  labelColor: '#6d777b',\n  lines: [],\n  label: index => index + 1,\n  color: (index, { lines }) =>\n    `hsl(${(index * (360 / lines.length) + 40) % 360}, 60%, 70%)`,\n}\n\nexport default LineChart\n"],"names":["LABELS_HEIGHT","WIDTH_DEFAULT","useMeasuredWidth","ref","useRef","measuredWidth","setMeasuredWidth","useState","onResize","useCallback","current","clientWidth","onRef","element","useEffect","window","addEventListener","removeEventListener","LineChart","animDelay","borderColor","color","dotRadius","height","label","labelColor","lines","linesProps","reset","springConfig","total","width","widthProps","props","progressVal","updateProgressVal","onSvgRef","useMemo","map","lineOrValues","Array","isArray","values","valuesCount","length","totalCount","getX","index","Math","max","getY","percentage","progress","padding","getLabelPosition","labels","keys","chartHeight","rectangle","React","useSpring","to","from","onChange","e","value","_extends","reduce","path","_","line","lineIndex","id","animated","slice","val","join","propTypes","PropTypes","_spring","number","string","bool","arrayOf","oneOfType","shape","isRequired","func","_null","defaultProps","springs","lazy","unselectable"],"mappings":"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"}